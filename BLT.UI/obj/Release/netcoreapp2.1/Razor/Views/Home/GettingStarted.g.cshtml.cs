#pragma checksum "/Users/tbatch27/Desktop/BLTlocal/BLT/BLT.UI/Views/Home/GettingStarted.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6c3c5d945d951acf3e286f22dc9aab12b67d2145"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_GettingStarted), @"mvc.1.0.view", @"/Views/Home/GettingStarted.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/GettingStarted.cshtml", typeof(AspNetCore.Views_Home_GettingStarted))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/Users/tbatch27/Desktop/BLTlocal/BLT/BLT.UI/Views/_ViewImports.cshtml"
using BLT.UI.ViewModels;

#line default
#line hidden
#line 2 "/Users/tbatch27/Desktop/BLTlocal/BLT/BLT.UI/Views/_ViewImports.cshtml"
using BLT.Domain.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6c3c5d945d951acf3e286f22dc9aab12b67d2145", @"/Views/Home/GettingStarted.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3a791b0485978c27180504f22272200d41406b7d", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_GettingStarted : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 1, true);
            WriteLiteral("\n");
            EndContext();
#line 2 "/Users/tbatch27/Desktop/BLTlocal/BLT/BLT.UI/Views/Home/GettingStarted.cshtml"
  
    ViewData["Title"] = "GettingStarted";

#line default
#line hidden
            BeginContext(48, 3, true);
            WriteLiteral("\n\n\n");
            EndContext();
            BeginContext(51, 7647, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "71de2fc7708445e7a37ef42ff30d8b43", async() => {
                BeginContext(57, 7634, true);
                WriteLiteral(@"
    <div class=""main-body content just-right"">
        <h2>Getting Started</h2>
        <p>This guide will inform you of the tools needed to run the automated tests on your computer and give you an overview of what each tool does.
            You can find detailed instructions on how to install these tools through a quick google search. 
            (There are a lot of Ruby Selenium/Cucumber examples on the web to help you write/edit the “code” part of the test if that is something you are interested in doing.)
        </p>
        <hr>
        
        <h4>Setting Up Environment to Run Cucumber Tests</h4>
        <p>You will need to have or install the following on your computer:</p>
        <div class=""green"">
            Ruby<br>
            Cucumber<br>
            Gherkin<br>
            Capybara<br>
            Selenium Webdriver<br>
            Chrome Driver<br>
        </div>
        <br>
        <p>You will also need to hav an IDE of choice. RubyMine, Sublime Text, Atom, Eclipse are some choices.</p");
                WriteLiteral(@">

        <hr>

        <div>
            <strong>What is Ruby?</strong>
            <p>Ruby is the language we will use to write the test code. Cucumber is written in Ruby. This is the first tool you need to install. The rest, apart from the IDE, will be installed through using Ruby’s “gem install” function.
            </p>

            <br>
            <strong>What is Cucumber?</strong>
            <p>Cucumber is a tool based on Behavior Driven Development (BDD). It is used to write acceptance tests for web application through automated testing. And it does this in an easily readable and understandable format (like plain English).
            When I try to login with ""user@example.com"" and ""password1""
            Then I should be logged in successfully
            (The example below is written in Gherkin format.)
            </p>

            <p><i>Gherkin</i> Is the language that Cucumber understands.<br>
            <div class=""green"">
                (Example)<br>
                Scenario: Buy last cof");
                WriteLiteral(@"fee<br>
                Given there is at least ""1"" coffee left in the machine<br>
                And I have deposited ""1"" dollar<br>
                When I press the ""coffee"" button<br>
                Then I should be served a coffee<br>
            </div>
            </p>
            <br>

            <strong>What is Capybara?</strong>
            <p>Capybara is a tool that interacts with a website the way a human would, by performing many standardized actions on a web page (like visiting a url, clicking a link, typing text into a form and submitting it).
            </p>

            <br>
            <strong>What is Selenium Webdriver?</strong>
             <p>Selenium is the HTTP driver used to navigate a browser from code.
            </p>

            <br>
            <strong>What is an IDE?</strong>
             <p>An integrated development environment, or IDE, is a computer program that makes it easier to write other computer programs. They are used to edit, test and run code. In our case we will be");
                WriteLiteral(@" using an IDE to run the feature files that are created.
            </p>


            <hr>
            <div>
                <div>
                        <button type=""button"" class=""small-dropbtn"" onclick=""toggle_div('sample-feature');"">(Feature File Example)</button>
                </div>
                <div class=""hidden-div"" id=""sample-feature"">
                    <div class=""green"">
                    <h4>Sample Feature File:</h4>
                    <p>Feature: Login Functionality Feature<br>
                    In order to ensure Login Functionality works,<br>
                    I want to run the cucumber test to verify it is working<br>
                    </p>
                    <p> 
                    <strong>Background:</strong> User is on EXAMPLE.COM<br>
                    Given user navigates to EXAMPLE.COM<br>
                    When 1 second elapses<br>
                    Then home page  title should be EXAMPLE.COM<br>
                    </p>
                    <p>
              ");
                WriteLiteral(@"      <strong>Scenario:</strong> Login Functionality<br>
                    Given user clicks the “log-in” button<br>
                    When user types Username as “USER” and Password “PASSWORD”<br>
                    Then login should be successful<br>
                    </p>
                    <p>
                    <strong>Scenario:</strong> Login Functionality<br>
                    Given user clicks the “log-in” button<br>
                    When user logs in using Username as “USER1” and Password “PASSWORD1”<br>
                    Then error message should be thrown
                    </p>
                    </div>

                    
                    <strong>Feature:</strong>
                    <p>This gives information about the high-level business functionality and the purpose of Application under test.
                    Everybody should be able to understand the intent of the feature file by reading the first Feature step.
                    It should be kept brief.
            ");
                WriteLiteral(@"            </p>
                    
                    <strong>Background:</strong>
                    <p>The Background is a function that is executed before each Scenario
                    </p>
                    
                <strong> Scenario:</strong>
                    <p>A scenario represents a particular functionality which is under test.
                    By seeing the scenario  the user should be able to understand the intent behind it and what the test is all about. 
                    Each scenario should follow given, when and then format. This language is called as “Gherkin”.
                    </p>

                    <strong>Scenario Outline:</strong>
                    <p>Scenario outlines are used when the same test has to be performed with different data set. 
                    Let’s take the same example. We have to test login functionality with multiple different sets of username and password. 
                    At the end of the Scenario you will have an ""Example:"" t");
                WriteLiteral(@"able that lists prameters and values.
                    </p>

                    <div class=""green"">
                    <p><strong>(Example)</strong><br>
                    Feature: Login Functionality Feature<br>
                    In order to ensure Login Functionality works,<br>
                    I want to run the cucumber test to verify it is working<br>
                    </p>
                    <p> 
                    <strong>Scenario Outline:</strong> Login Functionality<br>
                    Given user navigates to SOFTWARETESTINGHELP.COM<br>
                    When user clicks the “log-in” button<br>
                    And user logs in using username as <<em>USERNAME</em>> and password <<em>PASSWORD</em>><br>
                    Then login should be successful<br>
                    </p>
                    
                    <strong>Examples:</strong><br>
                    <p>|    <em>USERNAME</em>  |   <em>PASSWORD</em>   |<br>
                    |    Tom       |   password1   ");
                WriteLiteral(@"|<br>
                    |    Harry 	   |   password2   |<br>
                    |    Jerry 	   |   password3   |<br>
                    </p>
                </div>
                
           </div>

           <hr>

        <br>
        <br>

        </div>
         <h4> <a download=""filename"">Download</a> Step Definition File</h4>
        <a href=""/CreateFeature/NewProject"" class=""features-button"" id=""create-feature-button"">Create Feature</a>


    </div>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(7698, 2, true);
            WriteLiteral("\n\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
